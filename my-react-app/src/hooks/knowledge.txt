Hook were added to React in version 16.8
Hooks allow us to "hook" into React features such as state and lifecycle methods

Hook Rules:
1. Can only be called inside React function components
2. Can only be called at the top level of a components
3. Cannot be conditional

--> Hook will not work in React clas components

-------------------- useState --------------------

The React useState Hook allows us to track state in a function components.
State generally refers to data or properties that need to be tracking in an application
useState accepts an initial state and returns two values:
- The current state.
- A function that updates the state.
The useState Hook can be used to keep track of strings, numbers, booleans, arrays, objects,
and any combination of these

When state is updated, the entrie state gets overwritten
If we only called setCar({color: "blue}), this would remove the brand, model, and year from our state
--> We can use the Javascript spread operator to help us


-------------------- useEffect --------------------

The useEffect Hook allows you to perform side effects in your components
Some examples of side effects are: fetching data, directly updating the DOM and timers
useEffect accepts two arguments. The second argument is optional.
useEffect(<function>, <dependency>)

useEffect runs on erery render. That means that when the count changes, a render happens, 
which then triggers another effect

1. No dependency passed:
    useEffect(() => {
        // Runs on every render
    });
2. An empty arrays:
    useEffect(() => {
        // Runs only on the first render
    }, []);
3. Props or state values:
    useEffect(() => {
        // Runs on the first render
        // ANd any time any dependency value changes
    }, [prop, state]);

Effect Cleanup
- Some effects require cleanup to reduce memory leaks;
- Timeouts, subscriptions, event listeners, and other effects that are no longer needed
should be disposed
-> return function at the end of the useEffect Hook

-------------------- useContext --------------------
React Context is a way to manage state globally
Can be used together with the useState Hook to share state between deeply nested
components more easily than with useState alone

The Problem:

State should be held by the highest parent component in the stack that requires access to the state
We have many nested components. The component at the top and bottom of the stack need 
access to the state
To do this without Context -> need to pass the state as "props" through each nested component
----> This is called "prop drilling"

--> The Solution: create Context

-------------------- useRef --------------------
The useRef Hook allows you to persist values between renders
It can be used to store a mutable value that does not cause a re-render when updated.
It can be used to access a DOM element directly

Does not cause Re-renders
- If we tired to count how many times our application renders using the useState hook,
we would be caught in an infinite loop since this Hook itself causes a re-render.
- To avoid this, we can use the useRef Hook.

useRef() only returns one item. It returns an Object called current.
When we initalize useRed we set the initial value: useRef(0)
It like doing this: const count = {current: 0}. We can access the count by using count.current


-------------------- useReducer --------------------
The useReducer Hook is similar to the useState hook.
It allows for custom state logic
If you can find yourself keeping track of multiple pieces of state that rely on complex logic,
useReducer may be useful.

Syntax: The useReducer Hook accepts two arguments:
useReducer(<reducer>, ,initialState>)
The reducer function contains your custom state logic and the initialState can be a simple value but
generally will contain an objects
The useReducer Hook returns the current state and a dispatch method.


-------------------- useCallback --------------------
The React useCallback Hook returns a memoized callback function
"Think of memoization as caching a value so that it does not need to be recalculated"
This allows us to isolate resource intensive functions so that they will not automatically
run on every render:
The useCallback Hook only runs when one of its dependencues update.
---> This can improve perfomance

The useCallback and useMemo Hooks are similar. The main difference is that useMemo returns a 
"memoized value" and useCallback returns a "memoized function"

Problem: One reason to use useCallback is to prevent a component from re-rendering unless its props
have changed.


